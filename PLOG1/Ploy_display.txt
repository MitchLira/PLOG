%Pr0jet0

board([
		[[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0]],
		[[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0]],
		[[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0]],
		[[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0]],
		[[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0]],
		[[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0]],
		[[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0]],
		[[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0]],
		[[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0]],
		[[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0]],
		[[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0]],
		[[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0]],
		[[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0]],
		[[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0]],
		[[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0]],
		[[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0],[z,be,0,bd,bd,0,be],[z,0,bv,0,0,bv,0]],
		[[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0],[t,0,0,0,t,t,t,0,0,0],[z,0,0,0,0,0,0,0,0,0]]
]).

%%%%%%%%%%			 ___
%%%%%%%%%%			/\ /\
%%%%%%%%%%			\/_\/

%translates dos simbolos
translate(1,'+').
translate(2,'*').
translate(0,' ').
translate(t,'-').
translate(bv,'|').
translate(bd,'/').
translate(be,'\\').

%translates dos id's dos jogadores
translate(a,'1').
translate(b,'2').

%===========================================================================================================
%============================================	REGRAS		================================================
%===========================================================================================================

%												DISPLAY DE UM TABULEIRO	

start :- 
		display_bords,
		board(T),
		display_board(T).
		
display_bords :-
		write(' A     B     C     D     E     F     G     H     I '),
		nl.

display_board([L1,L2|Ls]) :-
		display_lineTop(L1),	% 	Display Parte de cima de cada peça
		display_lineMid(L1),	% 	Display Parde do meio de cada peça
		display_lineDown(L1),	% 	Display Parte de baixo de cada peça
		display_lineTop(L2),	% 	Display Parte de cima dos caminhos entre cada linha de peças
		display_lineMid(L2),	% 	Display Parte de baixo dos caminhos entre cada linha de peças
		display_board(Ls).	
				
display_board([L1|[]]) :- 		% 	Chama esta função quando na recursividade quando é para fazer display da última linha
		display_lineTop(L1),	% 	Estas 3 linhas seguintes é como anteriormente
		display_lineMid(L1),
		display_lineDown(L1),
		display_board([]).
		
display_board([]) :- nl.		% 	Condição de paragem para o display



% 									Vamos apenas ignorar o primeiro elemento da lista
display_lineTop([L1|Ls]) :- 
		display_Top(L1),
		display_lineTop(Ls).
display_lineTop([]) :- nl.
display_Top([E1|Ls]) :-
		junta_pecas(Ls,T).

		
		
%									Vamos ignorar o primeiro e a parte de cima, isto é, os 3 seguintes
display_lineMid([L1|Ls]) :- 
		display_Mid(L1),
		display_lineMid(Ls).
display_lineMid([]) :- nl.
display_Mid([E1,E2,E3,E4|Ls]) :-
		junta_pecas(Ls,T).		

		
		
%									Vamos ignrar o primeiro, a parte de cima e a parte do meio, isto é, os 6 seguintes
display_lineDown([L1|Ls]) :- 
		display_Down(L1),
		display_lineDown(Ls).
display_lineDown([]) :- nl.
display_Down([E1,E2,E3,E4,E5,E6,E7|Ls]) :-
		junta_pecas(Ls,T).		

		
		
%									Faz append das partes todas, isto é, faz append das aprtes de cima das peças e depois display destas mesmas
junta_pecas([E1,E2,E3|Ls],T) :-
		append([E1,E2,E3],[],T),
		display_peca(T).
		
		
		
display_peca([E1|Es]) :-			
		translate(E1,P),
		write(P),
		display_peca(Es).
display_peca([]) :- write('').

%
%
%	Falta arranjar maneira de fazer display dos numeros como na batalha naval.
%	e fazer o resto do projeto
%
%
%
%